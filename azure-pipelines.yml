trigger:
  branches:
    include: ["master", "develop*", "release*", "refs/tags/*" ]
  paths:
    exclude: [ "doc", "*.md", ".gitignore" ]

variables:
- name: WXVERSION
  value: v3.2.8

jobs:
- job: Chorizo_Windows
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      echo Install VS2019
      cd $BUILD_SOURCESDIRECTORY
      cd ".github/windows/"
      move vsconfig c:\vsconfig
      ./install.bat
    displayName: 'Install VS2019'
    continueOnError: false

  - script: |
      cd $BUILD_SOURCESDIRECTORY
      git clone https://github.com/wxWidgets/wxWidgets.git
      cd wxWidgets
      git checkout tags/${{ variables.WXVERSION }}
      git submodule update --init --recursive
      cd build/msw
      powershell -Command "Get-ChildItem *.vcxproj -recurse | ForEach {(Get-Content $_.FullName | ForEach {$_.Replace('MultiThreadedDLL', 'MultiThreaded')}) | Set-Content $_.FullName}"
    displayName: 'Download wxWidgets'
    continueOnError: false
   
  - task: VSBuild@1
    inputs:
      solution: '$(Build.SourcesDirectory)/wxWidgets/build/msw/wx_vc16.sln' 
      configuration: 'Release'
      vsVersion: '16.0'
    displayName: 'Compile wxWidgets'
    continueOnError: false
       
  - task: VSBuild@1
    env:
      WXWIN: '$(Build.SourcesDirectory)/wxWidgets'
    inputs:
      solution: '$(Build.SourcesDirectory)/Sample Previewer/Chorizo.sln' 
      configuration: 'Release'
      vsVersion: '16.0'
      msbuildArchitecture: 'x86'
    displayName: 'Compile Chorizo'
    continueOnError: false

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/Sample Previewer/Release/Chorizo.exe'
      #pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'chorizo-windows' 
      publishLocation: 'Container' # Options: container, filePath
      parallel: true # Optional

- job: Chorizo_MacOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      git clone https://github.com/wxWidgets/wxWidgets.git
      cd wxWidgets
      git checkout tags/${{ variables.WXVERSION }}
      git submodule update --init --recursive
      
      mkdir build-cocoa
      cd build-cocoa
      ../configure --with-opengl --disable-shared --disable-sys-libs
      make
      sudo make install
    displayName: 'Compile wxWidgets'
    continueOnError: false
  
  - script: |      
      cd $BUILD_SOURCESDIRECTORY
      echo Build App
      cd "./Sample Previewer/"
      ls
      make
      cd build
      chmod +x Chorizo
    displayName: 'Build Chorizo'
    continueOnError: false

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/Sample Previewer/build/Chorizo' 
      #pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'chorizo-macos' 
      publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      parallel: true # Optional
      #parallelCount: # Optional

- job: Chorizo_Linux
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      echo Add Linux dependencies
      sudo apt update
      sudo apt install build-essential
      sudo apt install libgtk-3-dev
      sudo apt install freeglut3-dev
    displayName: 'Add Linux dependencies'
    continueOnError: false
      
  - script: |
      git clone https://github.com/wxWidgets/wxWidgets.git
      cd wxWidgets
      git checkout tags/${{ variables.WXVERSION }}
      git submodule update --init --recursive
      mkdir gtk-build
      cd gtk-build
      ../configure --with-opengl --disable-shared --with-libjpeg=builtin
      make -j$(nproc)
      sudo make install
      sudo ldconfig
    displayName: 'Build wxWidgets'
    continueOnError: false
      
  - script: |
      cd $BUILD_SOURCESDIRECTORY
      echo Build App
      cd "./Sample Previewer/"
      ls
      make
      cd build
      chmod +x Chorizo
    displayName: 'Build Chorizo'
    continueOnError: false

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/Sample Previewer/build/Chorizo' 
      #pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'chorizo-linux' 
      publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      parallel: true # Optional
      #parallelCount: # Optional
      
- job: Arabiki_Windows
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      cd $BUILD_SOURCESDIRECTORY
      cd "Sample Parser"
      makeme.bat

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/Sample Parser/arabiki64.exe'
      #pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'arabiki-windows' 
      publishLocation: 'Container' # Options: container, filePath
      parallel: true # Optional
      
- job: Arabiki_MacOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: |
      cd $BUILD_SOURCESDIRECTORY
      
      echo Build App
      cd "./Sample Parser/"
      make 
    displayName: 'Build Program'
    continueOnError: false

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/Sample Parser/build/arabiki64' 
      #pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'arabiki-macos' 
      publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      parallel: true # Optional
      #parallelCount: # Optional
      
- job: Arabiki_Linux
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      cd $BUILD_SOURCESDIRECTORY
      
      echo Build App
      cd "./Sample Parser/"
      make 
    displayName: 'Build Program'
    continueOnError: false

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/Sample Parser/build/arabiki64' 
      #pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'arabiki-linux' 
      publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      parallel: true # Optional
      #parallelCount: # Optional